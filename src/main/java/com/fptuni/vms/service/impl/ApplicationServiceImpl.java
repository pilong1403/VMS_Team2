
package com.fptuni.vms.service.impl;

import com.fptuni.vms.model.Application;
import com.fptuni.vms.model.Opportunity;
import com.fptuni.vms.model.User;
import com.fptuni.vms.repository.ApplicationRepository;
import com.fptuni.vms.repository.OpportunityRepository;
import com.fptuni.vms.repository.UserRepository;
import com.fptuni.vms.service.ApplicationService;
import jakarta.transaction.Transactional;

import java.time.LocalDateTime;
import java.util.Comparator;
import java.util.List;

import org.springframework.stereotype.Service;

@Service
public class ApplicationServiceImpl implements ApplicationService {

        private final ApplicationRepository applicationRepository;
        private final OpportunityRepository opportunityRepository;
        private final UserRepository userRepository;

        public ApplicationServiceImpl(ApplicationRepository applicationRepository,
                        OpportunityRepository opportunityRepository,
                        UserRepository userRepository) {
                this.applicationRepository = applicationRepository;
                this.opportunityRepository = opportunityRepository;
                this.userRepository = userRepository;
        }

        @Transactional
        @Override
        public Application applyOpportunity(Integer opportunityId, String email, String reason) {
                System.out.println("üîµ [ApplicationService] B·∫Øt ƒë·∫ßu x·ª≠ l√Ω n·ªôp ƒë∆°n cho opportunityId=" + opportunityId
                                + ", email=" + email);

                Opportunity opportunity = opportunityRepository.findById(opportunityId)
                                .orElseThrow(() -> new RuntimeException("C∆° h·ªôi kh√¥ng t·ªìn t·∫°i."));
                System.out.println(
                                " T√¨m th·∫•y c∆° h·ªôi: " + opportunity.getTitle() + ", status=" + opportunity.getStatus());
                if (opportunity.getStatus() != Opportunity.OpportunityStatus.OPEN) {
                        System.err.println(
                                        " C∆° h·ªôi kh√¥ng ·ªü tr·∫°ng th√°i OPEN, status hi·ªán t·∫°i: " + opportunity.getStatus());
                        throw new RuntimeException("C∆° h·ªôi ƒë√£ ƒë√≥ng.");
                }

                User volunteer = userRepository.findByEmail(email)
                                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng."));
                System.out.println("T√¨m th·∫•y volunteer: userId=" + volunteer.getUserId() + ", email="
                                + volunteer.getEmail());

                if (applicationRepository.existsByOpportunity_OppIdAndVolunteer_UserId(opportunityId,
                                volunteer.getUserId())) {
                        System.err.println(" Volunteer ƒë√£ ·ª©ng tuy·ªÉn c∆° h·ªôi n√†y r·ªìi!");
                        throw new RuntimeException("B·∫°n ƒë√£ ·ª©ng tuy·ªÉn c∆° h·ªôi n√†y r·ªìi.");
                }
                System.out.println("Ki·ªÉm tra tr√πng l·∫∑p OK - t·∫°o ƒë∆°n m·ªõi");

                Application app = new Application();
                app.setOpportunity(opportunity);
                app.setVolunteer(volunteer);
                app.setReason(reason);
                app.setStatus(Application.ApplicationStatus.PENDING);
                app.setAppliedAt(LocalDateTime.now());

                System.out.println(" ƒêang l∆∞u Application v√†o DB...");
                Application savedApp = applicationRepository.save(app);
                System.out.println(" L∆∞u th√†nh c√¥ng! appId=" + savedApp.getAppId() + ", volunteerId="
                                + savedApp.getVolunteer().getUserId());

                return savedApp;
        }

        // L·∫•y danh s√°ch ƒë∆°n theo volunteer

        @Override
        public List<Application> getApplicationsByVolunteerId(Integer userId, String q, String status, String sort) {
                System.out.println(" [ApplicationService] L·∫•y danh s√°ch ƒë∆°n cho userId=" + userId);
                List<Application> apps = applicationRepository.findByVolunteer_UserId(userId);
                System.out.println(" T√¨m th·∫•y " + apps.size() + " ƒë∆°n t·ª´ DB");

                // --- L·ªçc theo t√™n c∆° h·ªôi ---
                if (q != null && !q.trim().isEmpty()) {
                        apps = apps.stream()
                                        .filter(a -> a.getOpportunity() != null &&
                                                        a.getOpportunity().getTitle().toLowerCase()
                                                                        .contains(q.toLowerCase()))
                                        .toList();
                }

                // --- L·ªçc theo tr·∫°ng th√°i ---
                if (status != null && !status.isEmpty()) {
                        apps = apps.stream()
                                        .filter(a -> a.getStatus() != null &&
                                                        a.getStatus().name().equalsIgnoreCase(status))
                                        .toList();
                }

                // --- S·∫Øp x·∫øp ---
                if ("oldest".equalsIgnoreCase(sort)) {
                        apps = apps.stream()
                                        .sorted(Comparator.comparing(Application::getAppliedAt))
                                        .toList();
                } else {
                        apps = apps.stream()
                                        .sorted((a, b) -> b.getAppliedAt().compareTo(a.getAppliedAt()))
                                        .toList();
                }

                return apps;
        }

        @Override
        public Integer getVolunteerIdByEmail(String email) {
                return userRepository.findByEmail(email)
                                .map(User::getUserId)
                                .orElse(null);
        }

        @Override
        @Transactional
        public Application getApplicationDetail(Integer appId) {
                return applicationRepository.findDetail(appId).orElse(null);
        }

        @Override
        @Transactional
        public void cancelApplication(Integer appId, String reason) {
                Application app = applicationRepository.findById(appId)
                                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y ƒë∆°n ·ª©ng tuy·ªÉn"));

                // N·∫øu ƒë√£ CANCELLED th√¨ th√¥i
                if (app.getStatus() == Application.ApplicationStatus.CANCELLED)
                        return;

                app.setStatus(Application.ApplicationStatus.CANCELLED);
                app.setCancelReason(reason != null ? reason : "Hu·ª∑ b·ªüi t√¨nh nguy·ªán vi√™n");
                app.setUpdatedAt(java.time.LocalDateTime.now());
                applicationRepository.save(app);
        }
}
